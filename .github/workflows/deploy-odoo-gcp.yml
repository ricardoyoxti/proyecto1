# .github/workflows/deploy-odoo-gcp.yml
name: üöÄ Deploy Odoo 18 to Google Cloud

on:
  workflow_dispatch:
    inputs:
      instance_name:
        description: 'Nombre base de la instancia (se a√±adir√° timestamp √∫nico)'
        required: false
        default: 'odoo'
      machine_type:
        description: 'Tipo de m√°quina'
        required: true
        default: 'e2-standard-2'
        type: choice
        options:
        - 'e2-micro'
        - 'e2-small'
        - 'e2-medium'
        - 'e2-standard-2'
        - 'e2-standard-4'
      zone:
        description: 'Zona de GCP'
        required: true
        default: 'us-central1-a'
      disk_size:
        description: 'Tama√±o del disco (GB)'
        required: true
        default: '20'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîê Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: ‚òÅÔ∏è Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: üè∑Ô∏è Generate instance name and firewall rules
      id: generate_name
      run: |
        BASE_NAME="${{ github.event.inputs.instance_name }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        INSTANCE_NAME="${BASE_NAME}-${TIMESTAMP}"
        
        # Generar nombres √∫nicos para las reglas de firewall
        FIREWALL_ODOO="allow-odoo-${TIMESTAMP}-${{ github.run_number }}"
        FIREWALL_SSH="allow-ssh-${TIMESTAMP}-${{ github.run_number }}"
        
        # Validar nombre de instancia (solo letras min√∫sculas, n√∫meros y guiones)
        if [[ ! $INSTANCE_NAME =~ ^[a-z0-9-]+$ ]]; then
          echo "‚ùå Error: El nombre de la instancia solo puede contener letras min√∫sculas, n√∫meros y guiones"
          exit 1
        fi
        
        echo "INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_OUTPUT
        echo "BASE_NAME=$BASE_NAME" >> $GITHUB_OUTPUT
        echo "FIREWALL_ODOO=$FIREWALL_ODOO" >> $GITHUB_OUTPUT
        echo "FIREWALL_SSH=$FIREWALL_SSH" >> $GITHUB_OUTPUT
        echo "üèóÔ∏è Nombre de instancia generado: $INSTANCE_NAME"
        echo "üî• Reglas de firewall: $FIREWALL_ODOO, $FIREWALL_SSH"

    # SOLUCI√ìN 1: Subir el archivo startup-script.sh a un bucket de GCS
    - name: üì§ Upload startup script to GCS bucket
      run: |
        # Crear bucket temporal si no existe (opcional)
        BUCKET_NAME="${{ env.PROJECT_ID }}-startup-scripts"
        gsutil mb gs://$BUCKET_NAME 2>/dev/null || echo "Bucket already exists or cannot be created"
        
        # Subir el archivo startup-script.sh
        gsutil cp startup-script.sh gs://$BUCKET_NAME/startup-script-${{ github.run_number }}.sh
        echo "STARTUP_SCRIPT_URL=gs://$BUCKET_NAME/startup-script-${{ github.run_number }}.sh" >> $GITHUB_ENV

    - name: üñ•Ô∏è Create VM Instance
      run: |
        INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
        
        echo "üèóÔ∏è Creando instancia: $INSTANCE_NAME"
        gcloud compute instances create $INSTANCE_NAME \
          --project=${{ env.PROJECT_ID }} \
          --zone=${{ github.event.inputs.zone }} \
          --machine-type=${{ github.event.inputs.machine_type }} \
          --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=default \
          --maintenance-policy=MIGRATE \
          --provisioning-model=STANDARD \
          --service-account=${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }} \
          --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append \
          --tags=odoo-server,http-server,https-server \
          --image-family=ubuntu-2204-lts \
          --image-project=ubuntu-os-cloud \
          --boot-disk-size=${{ github.event.inputs.disk_size }} \
          --boot-disk-type=pd-balanced \
          --boot-disk-device-name=$INSTANCE_NAME \
          --no-shielded-secure-boot \
          --shielded-vtpm \
          --shielded-integrity-monitoring \
          --labels=environment=production,application=odoo18,created-by=github-actions \
          --reservation-affinity=any \
          --metadata=startup-script-url=${{ env.STARTUP_SCRIPT_URL }},instance-name=$INSTANCE_NAME,deployment-time=$(date -u +"%Y-%m-%dT%H:%M:%SZ"),github-actor=${{ github.actor }}

    - name: üî• Create firewall rules with unique names
      run: |
        FIREWALL_ODOO="${{ steps.generate_name.outputs.FIREWALL_ODOO }}"
        FIREWALL_SSH="${{ steps.generate_name.outputs.FIREWALL_SSH }}"
        
        echo "üî• Creando regla de firewall para Odoo: $FIREWALL_ODOO"
        gcloud compute firewall-rules create $FIREWALL_ODOO \
          --project=${{ env.PROJECT_ID }} \
          --direction=INGRESS \
          --priority=1000 \
          --network=default \
          --action=ALLOW \
          --rules=tcp:8069 \
          --source-ranges=0.0.0.0/0 \
          --target-tags=odoo-server \
          --description="Allow Odoo 18 access on port 8069 - Created by GitHub Actions run ${{ github.run_number }}"
        
        echo "üîí Creando regla de firewall para SSH: $FIREWALL_SSH"
        gcloud compute firewall-rules create $FIREWALL_SSH \
          --project=${{ env.PROJECT_ID }} \
          --direction=INGRESS \
          --priority=1000 \
          --network=default \
          --action=ALLOW \
          --rules=tcp:22 \
          --source-ranges=0.0.0.0/0 \
          --target-tags=odoo-server \
          --description="Allow SSH access for Odoo server - Created by GitHub Actions run ${{ github.run_number }}"
        
        echo "‚úÖ Reglas de firewall creadas exitosamente"

    - name: üìä Get instance details
      run: |
        INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
        FIREWALL_ODOO="${{ steps.generate_name.outputs.FIREWALL_ODOO }}"
        FIREWALL_SSH="${{ steps.generate_name.outputs.FIREWALL_SSH }}"
        
        echo "üéâ Instancia creada exitosamente!"
        echo "üìç Detalles de la instancia:"
        gcloud compute instances describe $INSTANCE_NAME \
          --zone=${{ github.event.inputs.zone }} \
          --format="table(name,status,machineType.basename(),scheduling.preemptible.yesno(yes='Yes',no='No'):label=PREEMPTIBLE,networkInterfaces[0].accessConfigs[0].natIP:label=EXTERNAL_IP,disks[0].diskSizeGb)"
        
        echo ""
        echo "üåê IP Externa:"
        EXTERNAL_IP=$(gcloud compute instances describe $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
        echo "IP: $EXTERNAL_IP"
        
        echo ""
        echo "üè∑Ô∏è Informaci√≥n del despliegue:"
        echo "Nombre generado: $INSTANCE_NAME"
        echo "Nombre base: ${{ steps.generate_name.outputs.BASE_NAME }}"
        echo "Desplegado por: ${{ github.actor }}"
        echo "Fecha: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "Reglas de firewall: $FIREWALL_ODOO, $FIREWALL_SSH"
        
        echo ""
        echo "üîó URLs de acceso:"
        echo "Odoo 18: http://$EXTERNAL_IP:8069"
        echo "SSH: gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }}"
        
        echo ""
        echo "‚è≥ La instalaci√≥n de Odoo 18 puede tardar entre 5-10 minutos despu√©s de que la instancia est√© ejecut√°ndose."
        echo "üìã Credenciales por defecto:"
        echo "  - Database: odoo"
        echo "  - User: admin"
        echo "  - Password: admin"
        
        echo ""
        echo "üóëÔ∏è Para eliminar la instancia y reglas de firewall:"
        echo "gcloud compute instances delete $INSTANCE_NAME --zone=${{ github.event.inputs.zone }}"
        echo "gcloud compute firewall-rules delete $FIREWALL_ODOO"
        echo "gcloud compute firewall-rules delete $FIREWALL_SSH"

    - name: üßπ Cleanup startup script from GCS
      if: always()
      run: |
        # Limpiar el archivo temporal del bucket
        gsutil rm ${{ env.STARTUP_SCRIPT_URL }} || echo "No se pudo eliminar el archivo temporal"
